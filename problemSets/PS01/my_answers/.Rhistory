# Print mean for comparison
cat("Sample Mean:", round(mean(y), 2), "\n")
lapply(c(ggplot2),  pkgTest)
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# As the sample size is less than 30 (n=25), it's more appropriate to use
# the t-distribution rather than the z-distribution.
# The t-distribution better reflects the uncertainty in sampling distribution
# for small sample sizes.
# Use t.test function to directly calculate the confidence interval
CI_result <- t.test(y, conf.level = 0.90, alternative = "two.sided", mu = 0)
# Print the results
cat("90% Confidence Interval:", round(CI_result$conf.int[1], 2), "to", round(CI_result$conf.int[2], 2), "\n")
# Print mean for comparison
cat("Sample Mean:", round(mean(y), 2), "\n")
# load data as vector
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# capture the number of observations
n <- length(y)
# load data as vector
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# capture the number of observations
n <- length(y)
# (a) Calculate the 90% confidence interval for the student IQ
# Step 1: get t-score
t <- qt(0.05, n-1, lower.tail = F)
# Step 2: Calculate lower and upper parts for the 90%
lower_CI <- mean(y)-(t*(sd(y)/sqrt(n)))
upper_CI <- mean(y)+(t*(sd(y)/sqrt(n)))
# print CIs with mean
c(lower_CI, mean(y), upper_CI) #Confidence interval (93.95993 102.92007) mean value(98.44000)
# double check our answer
t.test(y, conf.level = 0.9)$"conf.int" #Use the t.test() function to directly calculate the 90% confidence interval and extract the confidence interval
# (b) Step 1: Calculate the standard error
SE <- sd(y)/sqrt(n)
# Step 2: Calculate the test statistic for this hypothesis testing of mean
t <- (mean(y) - 100)/SE
# Get the p-value from t-distribution
pvalue <- pt(t, n-1, lower.tail = F)
# Or another way to do this hypothesis testing is to use the function t.test directly
t.test(y, mu = 100, conf.level = 0.95, alternative = "greater")
# read in expenditure data
expenditure <- read.table("expenditure.txt", header=T)
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# As the sample size is less than 30 (n=25), it's more appropriate to use
# the t-distribution rather than the z-distribution.
# The t-distribution better reflects the uncertainty in sampling distribution
# for small sample sizes.
# Use t.test function to directly calculate the confidence interval
CI_result <- t.test(y, conf.level = 0.90, alternative = "two.sided", mu = 0)
# Print the results
cat("90% Confidence Interval:", round(CI_result$conf.int[1], 2), "to", round(CI_result$conf.int[2], 2), "\n")
# Print mean for comparison
cat("Sample Mean:", round(mean(y), 2), "\n")
# Perform one-tailed t-test
test_result <- t.test(y, mu = 100, alternative = "greater")
# Print results
cat("Hypothesis Test Results:\n")
cat("t-statistic:", round(test_result$statistic, 4), "\n")
cat("p-value:", round(test_result$p.value, 4), "\n")
cat("95% Confidence Interval:\n")
cat("  Lower bound:", round(test_result$conf.int[1], 2), "\n")
cat("  Upper bound:", round(test_result$conf.int[2], 2), "\n")
cat("Sample mean:", round(test_result$estimate, 2), "\n")
# (b) Step 1: Calculate the standard error
SE <- sd(y)/sqrt(n)
# Step 2: Calculate the test statistic for this hypothesis testing of mean
t <- (mean(y) - 100)/SE
# Get the p-value from t-distribution
pvalue <- pt(t, n-1, lower.tail = F)
# Or another way to do this hypothesis testing is to use the function t.test directly
t.test(y, mu = 100, conf.level = 0.95, alternative = "greater")
# As the sample size is less than 30 (n=25), it's more appropriate to use
# the t-distribution rather than the z-distribution.
# The t-distribution better reflects the uncertainty in sampling distribution
# for small sample sizes.
# Use t.test function to directly calculate the confidence interval
CI_result <- t.test(y, conf.level = 0.90, alternative = "two.sided", mu = 0)
# Print the results
cat("90% Confidence Interval:", round(CI_result$conf.int[1], 2), "to", round(CI_result$conf.int[2], 2), "\n")
# Print mean for comparison
cat("Sample Mean:", round(mean(y), 2), "\n")
# Print results
cat("Hypothesis Test Results:\n")
cat("t-statistic:", round(test_result$statistic, 4), "\n")
cat("p-value:", round(test_result$p.value, 4), "\n")
cat("95% Confidence Interval:\n")
cat("  Lower bound:", round(test_result$conf.int[1], 2), "\n")
cat("  Upper bound:", round(test_result$conf.int[2], 2), "\n")
cat("Sample mean:", round(test_result$estimate, 2), "\n")
# (b) Step 1: Calculate the standard error
SE <- sd(y)/sqrt(n)
# Step 2: Calculate the test statistic for this hypothesis testing of mean
t <- (mean(y) - 100)/SE
# Get the p-value from t-distribution
pvalue <- pt(t, n-1, lower.tail = F)
# Or another way to do this hypothesis testing is to use the function t.test directly
t.test(y, mu = 100, conf.level = 0.95, alternative = "greater")
source("~/Documents/GitHub/StatsI_Fall2024/problemSets/PS01/my_answers/PS01_CT.A.R")
source("~/Documents/GitHub/StatsI_Fall2024/problemSets/PS01/my_answers/PS01_CT.A.R")
lapply(c(),  pkgTest("ggplot2")
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
lapply(c(),  pkgTest)
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
lapply(c("ggplot2"),  pkgTest)
source("~/Documents/GitHub/StatsI_Fall2024/problemSets/PS01/my_answers/PS01_CT.A.R")
source("~/Documents/GitHub/StatsI_Fall2024/problemSets/PS01/my_answers/PS01_CT.A.R")
# read in expenditure data
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/expenditure.txt", header=T)
# explore the data
str(expenditure)  # Examine the structure of the dataframe
summary(expenditure)  # Get summary statistics for all variables
pairs(expenditure[, c("Y", "X1", "X2", "X3")])
cor(df[, c("Y", "X1", "X2", "X3")])
cor(expenditure[, c("Y", "X1", "X2", "X3")])
# explore the data
str(expenditure)  # Examine the structure of the dataframe
#Plot the relationship between Y and Region
boxplot(Y ~ Region, data = expenditure,
main = "Per Capita Expenditure on Housing Assistance by Region",
xlab = "Region",
ylab = "Per Capita Expenditure ($)")
# Boxplot
boxplot(df$income ~ df$cap,
main="Boxplot of Income by place of residence",
ylab="Euro",
xlab="Place of residence",
names=c("Non capital","Capital"))
# Set working directory to folder that this file is located in
setwd("~/Documents/GitHub/StatsI_Fall2024/problemSets/PS01/my_answers")
# Load data
df <- read.csv("fictional_data.csv")
plot(density(df$incom),
main="Monthly net income",
xlab="Euro")
# Boxplot
boxplot(df$income ~ df$cap,
main="Boxplot of Income by place of residence",
ylab="Euro",
xlab="Place of residence",
names=c("Non capital","Capital"))
#Plot the relationship between Y and Region
#To visualize this relationship, we can use a boxplot
boxplot(Y ~ Region, data = expenditure,
main = "Per Capita Expenditure on Housing Assistance by Region",
xlab = "Region",
ylab = "Per Capita Expenditure ($)")
#Plot the relationship between Y and Region
#To visualize this relationship, we can use a boxplot
boxplot(Y ~ Region, data = expenditure,
main = "Per Capita Expenditure on Housing Assistance by Region",
xlab = "Region",
ylab = "Y")
#plot all of the bivariates relationships between the outcome and the predictors
#as well as the predictors themselves
#To visualize relationships between these variables
#we can create a scatter plot matrix using the pairs() function
pairs(expenditure[, c("Y", "X1", "X2", "X3")])
#Plot the relationship between Y and Region
#To visualize this relationship, we can use a boxplot
boxplot(Y ~ Region, data = expenditure,
main = "Per Capita Expenditure on Housing Assistance by Region",
xlab = "Region",
ylab = "Y")
#Plot the relationship between Y and Region
#To visualize this relationship, we can use a boxplot
boxplot(Y ~ Region, data = expenditure,
main = "Per Capita Expenditure on Y by Region",
xlab = "Y",
ylab = "Region")
#Plot the relationship between Y and Region
#To visualize this relationship, we can use a boxplot
boxplot(Y ~ Region, data = expenditure,
main = "Per Capita Expenditure on Y by Region",
xlab = "Region",
ylab = "Y")
#Plot the relationship between Y and Region
#To visualize this relationship, we can use a boxplot
boxplot(Y ~ Region, data = expenditure,
main = "relationship between Y and Region",
xlab = "Region",
ylab = "Y")
#Plot the relationship between Y and Region
#To visualize this relationship, we can use a boxplot
boxplot(Y ~ Region, data = expenditure,
main = "relationship between Y and Region",
xlab = "Y",
ylab = "Region")
#Plot the relationship between Y and Region
#To visualize this relationship, we can use a boxplot
boxplot(Y ~ Region, data = expenditure,
main = "relationship between Y and Region",
xlab = "Region",
ylab = "Y")
#Plot the relationship between Y and Region
#To visualize this relationship, we can use a boxplot
boxplot(Y ~ Region, data = expenditure,
main = "Per Capita Expenditure on Housing Assistance by Region",
xlab = "Region",
ylab = "Per Capita Expenditure ($)")
plot(expenditure$X1, expenditure$Y,
col = expenditure$Region,  # Assuming Region is numeric 1-4
pch = as.numeric(expenditure$Region),  # Different symbol for each region
xlab = "Per Capita Personal Income",
ylab = "Per Capita Expenditure on Housing Assistance",
main = "Relationship between Income and Housing Assistance Expenditure")
#display different regions with different types of symbols and colors.
legend("topright",
legend = c("Northeast", "North Central", "South", "West"),
col = 1:4,
pch = 1:4)
create_scatter_plot("X1", "Y", "Per Capita Personal Income", "Expenditure $Y")
plot(expenditure$Y,expenditure$X1)
plot(df$income,
df$edu,
col=df$cap+1,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
plot(expenditure$Y,
expenditure$X1,
col=expenditure$cap+1,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
plot(expenditure$Y,expenditure$X1)
plot(expenditure$X1,expenditure$Y)
plot(expenditure$X1,
expenditure$Y,
col=expenditure$cap+1,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
plot(expenditure$X1, expenditure$Y,
xlab="Per Capita Personal Income",
ylab="Per Capita Expenditure on Housing Assistance",
main="Relationship between Income and Housing Assistance Expenditure")
plot(expenditure$X1, expenditure$Y,
xlab="X1:Per Capita Personal Income",
ylab="Y:Per Capita Expenditure on Housing Assistance",
main="Relationship between Income and Housing Assistance Expenditure")
plot(expenditure$X1, expenditure$Y,
xlab="X1: Per Capita Personal Income",
ylab="Y: Per Capita Expenditure on Housing Assistance",
main="Relationship between Income and Housing Assistance Expenditure")
plot(expenditure$X1, expenditure$Y,
col = expenditure$Region,  # Assuming Region is numeric 1-4
pch = as.numeric(expenditure$Region),  # Different symbol for each region
xlab = "Per Capita Personal Income",
ylab = "Per Capita Expenditure on Housing Assistance",
main = "Relationship between Income and Housing Assistance Expenditure")
plot(expenditure$X1, expenditure$Y,
xlab="X1: Per Capita Personal Income",
ylab="Y: Per Capita Expenditure on Housing Assistance",
main="Relationship between Income and Housing Assistance Expenditure")
#Plot the relationship between Y and X1 and region
plot(expenditure$X1, expenditure$Y,
col = expenditure$Region,  # Assuming Region is numeric 1-4
pch = as.numeric(expenditure$Region),  # Different symbol for each region
xlab = "Per Capita Personal Income",
ylab = "Per Capita Expenditure on Housing Assistance",
main = "Relationship between Income and Housing Assistance Expenditure")
#display different regions with different types of symbols and colors.
legend("topright",
legend = c("Northeast", "North Central", "South", "West"),
col = 1:4,
pch = 1:4)
# Add legend
legend("topright",
legend = c("Northeast", "North Central", "South", "West"),
col = 1:4,
pch = 1:4)
#Plot the relationship between Y and X1
plot(expenditure$X1, expenditure$Y,
xlab="X1: Per Capita Personal Income",
ylab="Y: Per Capita Expenditure on Housing Assistance",
main="Relationship between Income and Housing Assistance Expenditure")
# Calculate correlation coefficients
cor(expenditure[,c("Y", "X1", "X2", "X3")])
#plot all of the bivariates relationships between the outcome and the predictors
#as well as the predictors themselves
#To visualize relationships between these variables
#we can create a scatter plot matrix using the pairs() function
pairs(expenditure[, c("Y", "X1", "X2", "X3")])
# Create contingency table
table_Y_Region <- table(cut(expenditure$Y, breaks=5), expenditure$Region)
# Calculate conditional probabilities
prop.table(table_Y_Region, margin=2)
# Perform chi-square test
chisq.test(table_Y_Region)
#Plot the relationship between Y and Region
#To visualize this relationship, we can use a boxplot
boxplot(Y ~ Region, data = expenditure,
main = "Per Capita Expenditure on Housing Assistance by Region",
xlab = "Region",
ylab = "Per Capita Expenditure ($)")
#Plot the relationship between Y and Region
#To visualize this relationship, we can use a boxplot
boxplot(Y ~ Region, data = expenditure,
main = "Per Capita Expenditure on Housing Assistance by Region",
xlab = "Region",
ylab = "Per Capita Expenditure ($)")
#plot all of the bivariates relationships between the outcome and the predictors
#as well as the predictors themselves
#To visualize relationships between these variables
#we can create a scatter plot matrix using the pairs() function
pairs(expenditure[, c("Y", "X1", "X2", "X3")])
# Calculate correlation coefficients
cor(expenditure[,c("Y", "X1", "X2", "X3")])
# Add regression line
abline(lm(Y ~ X1, data=expenditure), col="red")
#Plot the relationship between Y and X1
plot(expenditure$X1, expenditure$Y,
xlab="X1: Per Capita Personal Income",
ylab="Y: Per Capita Expenditure on Housing Assistance",
main="Relationship between Income and Housing Assistance Expenditure")
# Add regression line
abline(lm(Y ~ X1, data=expenditure), col="red")
# Calculate correlation coefficient
cor(expenditure$Y, expenditure$X1)
# Run regression analysis
regression1 <- lm(Y ~ X1, data=expenditure)
# Save regression results
output_stargazer <- function(outputFile, ...) {
output <- capture.output(stargazer(...))
cat(paste(output, collapse = "\n"), "\n", file=outputFile, append=TRUE)
}
output_stargazer("regression_output1.tex", regression1)
install.packages("stargazer")
# Calculate correlation coefficient
cor(expenditure$Y, expenditure$X1)
# Run regression analysis
regression1 <- lm(Y ~ X1, data=expenditure)
# Save regression results
output_stargazer <- function(outputFile, ...) {
output <- capture.output(stargazer(...))
cat(paste(output, collapse = "\n"), "\n", file=outputFile, append=TRUE)
}
output_stargazer("regression_output1.tex", regression1)
output_stargazer("regression_output1.tex", regression1)
summary(regression1)
# Run and show regression analysis
regression1 <- lm(Y ~ X1, data=expenditure)
summary(regression1)
#Plot the relationship between Y and X1
plot(expenditure$X1, expenditure$Y,
xlab="X1: Per Capita Personal Income",
ylab="Y: Per Capita Expenditure on Housing Assistance",
main="Relationship between Income and Housing Assistance Expenditure")
# Add regression line
abline(lm(Y ~ X1, data=expenditure), col="red")
# Calculate correlation coefficient
cor(expenditure$Y, expenditure$X1)
# Run and show regression analysis
regression1 <- lm(Y ~ X1, data=expenditure)
summary(regression1)
#Plot the relationship between Y and X1
plot(expenditure$X1, expenditure$Y,
xlab="X1: Per Capita Personal Income",
ylab="Y: Per Capita Expenditure on Housing Assistance",
main="Relationship between Income and Housing Assistance Expenditure")
# Add regression line
abline(lm(Y ~ X1, data=expenditure), col="red")
# Calculate correlation coefficient
cor(expenditure$Y, expenditure$X1)
# Run and show regression analysis
regression1 <- lm(Y ~ X1, data=expenditure)
summary(regression1)
output_stargazer("regression_output1.tex", regression1)
#install stargazer packages
install.packages("stargazer")
library(stargazer)
# Run and show regression analysis
regression1 <- lm(Y ~ X1, data=expenditure)
output_stargazer <- function(outputFile, ...) {
output <- capture.output(stargazer(...))
cat(paste(output, collapse = "\n"), "\n", file=outputFile, append=TRUE)
}
output_stargazer("regression_output1.tex", regression1)
# Calculate correlation coefficient
cor(expenditure$Y, expenditure$X1)
#plot all of the bivariates relationships between the outcome and the predictors
#as well as the predictors themselves
#To visualize relationships between these variables
#we can create a scatter plot matrix using the pairs() function
pairs(expenditure[, c("Y", "X1", "X2", "X3")])
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# As the sample size is less than 30 (n=25), it's more appropriate to use
# the t-distribution rather than the z-distribution.
# The t-distribution better reflects the uncertainty in sampling distribution
# for small sample sizes.
# Use t.test function to directly calculate the confidence interval
CI_result <- t.test(y, conf.level = 0.90, alternative = "two.sided", mu = 0)
# Print the results
cat("90% Confidence Interval:", round(CI_result$conf.int[1], 2), "to", round(CI_result$conf.int[2], 2), "\n")
# Print mean for comparison
cat("Sample Mean:", round(mean(y), 2), "\n")
# Perform one-tailed t-test
test_result <- t.test(y, mu = 100, alternative = "greater")
# Print results
cat("Hypothesis Test Results:\n")
cat("t-statistic:", round(test_result$statistic, 4), "\n")
cat("p-value:", round(test_result$p.value, 4), "\n")
cat("95% Confidence Interval:\n")
cat("  Lower bound:", round(test_result$conf.int[1], 2), "\n")
cat("  Upper bound:", round(test_result$conf.int[2], 2), "\n")
cat("Sample mean:", round(test_result$estimate, 2), "\n")
# read in expenditure data
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/expenditure.txt", header=T)
# explore the data
str(expenditure)  # Examine the structure of the dataframe
summary(expenditure)  # Get summary statistics for all variables
#plot all of the bivariates relationships between the outcome and the predictors
#as well as the predictors themselves
#To visualize relationships between these variables
#we can create a scatter plot matrix using the pairs() function
pairs(expenditure[, c("Y", "X1", "X2", "X3")])
# Calculate correlation coefficients
cor(expenditure[,c("Y", "X1", "X2", "X3")])
#Plot the relationship between Y and Region
#To visualize this relationship, we can use a boxplot
boxplot(Y ~ Region, data = expenditure,
main = "Per Capita Expenditure on Housing Assistance by Region",
xlab = "Region",
ylab = "Per Capita Expenditure ($)")
#Plot the relationship between Y and X1
plot(expenditure$X1, expenditure$Y,
xlab="X1: Per Capita Personal Income",
ylab="Y: Per Capita Expenditure on Housing Assistance",
main="Relationship between Income and Housing Assistance Expenditure")
# Add regression line
abline(lm(Y ~ X1, data=expenditure), col="red")
# Calculate correlation coefficient
cor(expenditure$Y, expenditure$X1)
#install stargazer packages
install.packages("stargazer")
summary(expenditure)  # Get summary statistics for all variables
# As the sample size is less than 30 (n=25), it's more appropriate to use
# the t-distribution rather than the z-distribution.
# The t-distribution better reflects the uncertainty in sampling distribution
# for small sample sizes.
# Use t.test function to directly calculate the confidence interval
CI_result <- t.test(y, conf.level = 0.90, alternative = "two.sided", mu = 0)
# Print the results
cat("90% Confidence Interval:", round(CI_result$conf.int[1], 2), "to", round(CI_result$conf.int[2], 2), "\n")
# Print mean for comparison
cat("Sample Mean:", round(mean(y), 2), "\n")
# As the sample size is less than 30 (n=25), it's more appropriate to use
# the t-distribution rather than the z-distribution.
# The t-distribution better reflects the uncertainty in sampling distribution
# for small sample sizes.
# Use t.test function to directly calculate the confidence interval
CI_result <- t.test(y, conf.level = 0.90, alternative = "two.sided", mu = 0)
# Print the results
cat("90% Confidence Interval:", round(CI_result$conf.int[1], 2), "to", round(CI_result$conf.int[2], 2), "\n")
# Print mean for comparison
cat("Sample Mean:", round(mean(y), 2), "\n")
# Print mean for comparison
cat("Sample Mean:", round(mean(y), 2), "\n")
# Print results
cat("Hypothesis Test Results:\n")
cat("t-statistic:", round(test_result$statistic, 4), "\n")
cat("p-value:", round(test_result$p.value, 4), "\n")
cat("95% Confidence Interval:\n")
cat("  Lower bound:", round(test_result$conf.int[1], 2), "\n")
cat("  Upper bound:", round(test_result$conf.int[2], 2), "\n")
summary(expenditure)  # Get summary statistics for all variables
#plot all of the bivariates relationships between the outcome and the predictors
#as well as the predictors themselves
#To visualize relationships between these variables
#we can create a scatter plot matrix using the pairs() function
pdf(”plot_pairs.pdf”)
pairs(expenditure[, c("Y", "X1", "X2", "X3")])
dev.off()
#plot all of the bivariates relationships between the outcome and the predictors
#as well as the predictors themselves
#To visualize relationships between these variables
#we can create a scatter plot matrix using the pairs() function
pdf("plot_pairs.pdf")
pairs(expenditure[, c("Y", "X1", "X2", "X3")])
dev.off()
#Plot the relationship between Y and Region
#To visualize this relationship, we can use a boxplot
pdf("plot_boxplot.pdf")
boxplot(Y ~ Region, data = expenditure,
main = "Per Capita Expenditure on Housing Assistance by Region",
xlab = "Region",
ylab = "Per Capita Expenditure ($)")
dev.off()
#Plot the relationship between Y and X1
pdf("plot_X1&Y.pdf")
plot(expenditure$X1, expenditure$Y,
xlab="X1: Per Capita Personal Income",
ylab="Y: Per Capita Expenditure on Housing Assistance",
main="Relationship between Income and Housing Assistance Expenditure")
# Add regression line
abline(lm(Y ~ X1, data=expenditure), col="red")
dev.off()
#Plot the relationship between Y and X1 and region
#display different regions with different types of symbols and colors.
pdf("plot_X1&Y&region.pdf")
plot(expenditure$X1, expenditure$Y,
col = expenditure$Region,
pch = as.numeric(expenditure$Region),  # Different symbol for each region
xlab = "X1: Per Capita Personal Income",
ylab = "Y: Per Capita Expenditure on Housing Assistance",
main = "Relationship between Income and Housing Assistance Expenditure")
# Add legend
legend("topright",
legend = c("Northeast", "North Central", "South", "West"),
col = 1:4,
pch = 1:4)
dev.off()
